from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.db.models import Q
from django.db import transaction
import json
import logging

from .models import LessonBlock, Lesson, LessonProgress
from .services.lesson_ai_service import LessonAIService
from .utils.progress import (
    update_profile_stats,
    unlock_next_lesson,
    check_block_completion,
    calculate_lesson_score
)
from .utils.validators import check_answer

logger = logging.getLogger(__name__)


def lessons_board_view(request):
    """
    –î–æ—Å–∫–∞ —Å –±–ª–æ–∫–∞–º–∏ —É—Ä–æ–∫–æ–≤
    
    URL: /lessons/board/
    """
    if not request.user.is_authenticated:
        return redirect('login')
    
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    blocks = LessonBlock.objects.filter(
        user=request.user
    ).prefetch_related('lessons').order_by('order')
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
    blocks_data = []
    for block in blocks:
        lessons = block.lessons.all().order_by('order')
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç –±–ª–æ–∫–∞
        if block.is_passed:
            color_class = 'bg-green-100 border-green-300'
        elif block.is_completed and not block.is_passed:
            color_class = 'bg-red-100 border-red-300'
        else:
            color_class = 'bg-gray-50 border-gray-300'
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —É—Ä–æ–∫–∏
        lessons_data = []
        for lesson in lessons:
            # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = LessonProgress.objects.filter(
                user=request.user,
                lesson=lesson
            ).first()
            
            # –ò–∫–æ–Ω–∫–∞ —É—Ä–æ–∫–∞
            icon_map = {
                'grammar': 'üìñ',
                'vocabulary': 'üìù',
                'reading': 'üìö'
            }
            
            # –°—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Å
            if progress and progress.is_completed:
                if progress.best_score >= 80:
                    status_class = 'text-green-600 font-semibold'
                else:
                    status_class = 'text-red-600 font-semibold'
            elif lesson.is_unlocked:
                status_class = 'text-blue-600'
            else:
                status_class = 'text-gray-400'
            
            lessons_data.append({
                'id': lesson.id,
                'title': lesson.title,
                'icon': icon_map.get(lesson.lesson_type, 'üìÑ'),
                'is_unlocked': lesson.is_unlocked,
                'status_class': status_class,
                'best_score': progress.best_score if progress else 0
            })
        
        blocks_data.append({
            'id': block.id,
            'title': block.title,
            'description': block.description,
            'level': block.level,
            'difficulty_level': block.difficulty_level,
            'order': block.order,
            'color_class': color_class,
            'is_completed': block.is_completed,
            'is_passed': block.is_passed,
            'completion_percent': block.completion_percent,
            'lessons': lessons_data
        })
    
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    has_incomplete_block = LessonBlock.objects.filter(
        user=request.user,
        is_completed=False
    ).exists()
    
    button_state = {
        'disabled': 'disabled' if has_incomplete_block else '',
        'text': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫' if has_incomplete_block else '‚ú® –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫'
    }
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        profile = request.user.profile
        stats = {
            'days_streak': profile.days_streak,
            'lessons_completed': profile.lessons_completed,
            'words_learned': profile.words_learned
        }
    except AttributeError:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
        from user.models import UserProfile
        profile = UserProfile.objects.create(user=request.user)
        stats = {
            'days_streak': 0,
            'lessons_completed': 0,
            'words_learned': 0
        }
    
    context = {
        'blocks': blocks_data,
        'button': button_state,
        'stats': stats,
        'has_blocks': blocks.exists()
    }
    
    return render(request, 'lessons/board.html', context)


@require_http_methods(["POST"])
def generate_block_view(request):
    """
    AJAX –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    
    URL: /lessons/generate/
    Method: POST
    """
    if not request.user.is_authenticated:
        return JsonResponse({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}, status=401)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        has_incomplete = LessonBlock.objects.filter(
            user=request.user,
            is_completed=False
        ).exists()
        
        if has_incomplete:
            return JsonResponse({
                'success': False,
                'error': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ'
            }, status=400)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ AI
        service = LessonAIService()
        block = service.generate_block(request.user)
        
        if not block:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            }, status=500)
        
        return JsonResponse({
            'success': True,
            'block_id': block.id,
            'message': '–ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!'
        })
        
    except Exception as e:
        logger.error(f"Error generating block for user {request.user.username}: {str(e)}")
        return JsonResponse({
            'success': False,
            'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }, status=500)


def lesson_detail_view(request, lesson_id):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Ä–æ–∫–∞
    
    URL: /lessons/lesson/<int:lesson_id>/
    """
    if not request.user.is_authenticated:
        return redirect('login')
    
    # –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫
    lesson = get_object_or_404(Lesson, id=lesson_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É—Ä–æ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–ª–æ–∫—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if lesson.block.user != request.user:
        return redirect('lessons_board')
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É—Ä–æ–∫
    if not lesson.is_unlocked:
        return redirect('lessons_board')
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress, created = LessonProgress.objects.get_or_create(
        user=request.user,
        lesson=lesson,
        defaults={'exercises_data': {}}
    )
    
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    component_map = {
        'grammar': 'lessons/components/grammar.html',
        'vocabulary': 'lessons/components/vocabulary.html',
        'reading': 'lessons/components/reading.html'
    }
    
    context = {
        'lesson': lesson,
        'progress': progress,
        'block': lesson.block,
        'content': lesson.content,
        'component_template': component_map.get(lesson.lesson_type, 'lessons/components/grammar.html')
    }
    
    return render(request, 'lessons/lesson_detail.html', context)


@require_http_methods(["POST"])
def save_progress_view(request):
    """
    AJAX –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î)
    
    URL: /lessons/save-progress/
    Method: POST
    Body: {lesson_id, exercise_id, user_answer}
    """
    if not request.user.is_authenticated:
        return JsonResponse({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}, status=401)
    
    try:
        data = json.loads(request.body)
        lesson_id = data.get('lesson_id')
        exercise_id = data.get('exercise_id')
        user_answer = data.get('user_answer')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not lesson_id or not exercise_id or user_answer is None:
            return JsonResponse({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
            }, status=400)
        
        # –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫
        lesson = get_object_or_404(Lesson, id=lesson_id)
        
        # –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        exercises = lesson.content.get('exercises', [])
        exercise = None
        
        for ex in exercises:
            if ex['id'] == exercise_id:
                exercise = ex
                break
        
        if not exercise:
            return JsonResponse({'success': False, 'error': '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}, status=404)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç
        correct_answer = exercise['correct_answer']
        is_correct = check_answer(user_answer, correct_answer)
        
        # –í–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ë–ï–ó –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)
        return JsonResponse({
            'is_correct': is_correct,
            'explanation': exercise.get('explanation', ''),
        })
        
    except json.JSONDecodeError:
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}, status=400)
    except Exception as e:
        logger.error(f"Error saving progress: {str(e)}")
        return JsonResponse({'success': False, 'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@require_http_methods(["POST"])
def complete_lesson_view(request):
    """
    AJAX –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ (—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
    
    URL: /lessons/complete-lesson/
    Method: POST
    Body: {lesson_id, exercises: {...}}
    """
    if not request.user.is_authenticated:
        return JsonResponse({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}, status=401)
    
    try:
        data = json.loads(request.body)
        lesson_id = data.get('lesson_id')
        exercises_data = data.get('exercises', {})
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not lesson_id:
            return JsonResponse({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç lesson_id'
            }, status=400)
        
        if not isinstance(exercises_data, dict):
            return JsonResponse({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç exercises_data'
            }, status=400)
        
        # –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫
        lesson = get_object_or_404(Lesson, id=lesson_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É—Ä–æ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if lesson.block.user != request.user:
            return JsonResponse({'success': False, 'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω'}, status=403)
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress, created = LessonProgress.objects.get_or_create(
            user=request.user,
            lesson=lesson
        )
        
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        score = calculate_lesson_score(exercises_data, lesson.content)
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        is_first_completion = not progress.is_completed
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        with transaction.atomic():
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            progress.current_score = score
            progress.exercises_data = exercises_data
            progress.attempts += 1
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            if score > progress.best_score:
                progress.best_score = score
            
            # –ï—Å–ª–∏ >= 80% - —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω
            if score >= 80:
                if not progress.is_completed:
                    progress.is_completed = True
                    progress.first_completed_at = timezone.now()
                
                progress.save()
                
                # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
                update_profile_stats(request.user, lesson, score, is_first_completion)
                
                # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
                next_lesson = unlock_next_lesson(lesson)
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞
                check_block_completion(lesson.block)
                
                return JsonResponse({
                    'success': True,
                    'score': score,
                    'is_first_completion': is_first_completion,
                    'next_lesson_unlocked': next_lesson is not None,
                    'message': '–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ'
                })
            else:
                # –ù–µ –ø—Ä–æ—à—ë–ª - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                progress.save()
                
                return JsonResponse({
                    'success': True,
                    'score': score,
                    'is_first_completion': False,
                    'next_lesson_unlocked': False,
                    'message': f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {score}%. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 80% –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.'
                })
        
    except json.JSONDecodeError:
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}, status=400)
    except Exception as e:
        logger.error(f"Error completing lesson: {str(e)}")
        return JsonResponse({'success': False, 'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)
