# Generated by Django 5.2.6 on 2025-10-17 08:37

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='Например: What ___ your name?', verbose_name='Текст вопроса')),
                ('question_type', models.CharField(choices=[('single', 'Один вариант ответа'), ('multiple', 'Несколько вариантов'), ('text', 'Текстовый ответ')], default='single', max_length=10, verbose_name='Тип вопроса')),
                ('level', models.CharField(choices=[('A1', 'A1 - Начальный'), ('A2', 'A2 - Элементарный'), ('B1', 'B1 - Средний'), ('B2', 'B2 - Выше среднего'), ('C1', 'C1 - Продвинутый'), ('C2', 'C2 - Профессиональный')], max_length=2, verbose_name='Уровень сложности')),
                ('options', models.JSONField(blank=True, help_text='Для single/multiple: ["is", "are", "am", "be"]', null=True, verbose_name='Варианты ответов')),
                ('correct_answer', models.JSONField(help_text='Для single: "0" или "a", для multiple: ["0","1"], для text: ["went","go"]', verbose_name='Правильный ответ')),
                ('explanation', models.TextField(blank=True, help_text='Почему это правильный ответ', verbose_name='Объяснение')),
                ('difficulty_score', models.IntegerField(default=50, help_text='0 - очень легко, 100 - очень сложно', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Сложность (0-100)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('is_ai_generated', models.BooleanField(default=False, help_text='Был ли вопрос сгенерирован искусственным интеллектом', verbose_name='Создан AI')),
                ('usage_count', models.IntegerField(default=0, help_text='Сколько раз этот вопрос был показан пользователям', verbose_name='Количество использований')),
                ('correct_rate', models.FloatField(default=0.0, help_text='От 0.0 до 1.0', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Процент правильных ответов')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
                'ordering': ['level', 'topic', 'difficulty_score'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Например: Present Simple, Articles, Vocabulary', max_length=100, unique=True, verbose_name='Название темы')),
                ('code', models.CharField(help_text='Например: present_simple, articles', max_length=50, unique=True, verbose_name='Код темы')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('levels', models.CharField(default='A1,A2,B1,B2,C1,C2', help_text='Например: A1,A2,B1', max_length=50, verbose_name='Уровни')),
                ('category', models.CharField(choices=[('grammar', 'Грамматика'), ('vocabulary', 'Словарный запас'), ('reading', 'Понимание текста'), ('usage', 'Использование языка')], default='grammar', max_length=50, verbose_name='Категория')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Тема',
                'verbose_name_plural': 'Темы',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TestSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'В процессе'), ('completed', 'Завершён'), ('timeout', 'Время истекло'), ('abandoned', 'Прерван')], default='in_progress', max_length=20, verbose_name='Статус')),
                ('determined_level', models.CharField(blank=True, choices=[('A1', 'A1 - Начальный'), ('A2', 'A2 - Элементарный'), ('B1', 'B1 - Средний'), ('B2', 'B2 - Выше среднего'), ('C1', 'C1 - Продвинутый'), ('C2', 'C2 - Профессиональный')], max_length=2, null=True, verbose_name='Определённый уровень')),
                ('total_questions', models.IntegerField(default=0, verbose_name='Всего вопросов')),
                ('correct_answers', models.IntegerField(default=0, verbose_name='Правильных ответов')),
                ('test_state', models.JSONField(default=dict, help_text='История ответов, анализ по темам и т.д.', verbose_name='Состояние теста')),
                ('grammar_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Грамматика (%)')),
                ('vocabulary_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Словарный запас (%)')),
                ('reading_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Понимание текста (%)')),
                ('usage_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Использование языка (%)')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Начало теста')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Завершение теста')),
                ('time_spent', models.IntegerField(default=0, help_text='Фактическое время прохождения', verbose_name='Время (секунды)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_sessions', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Сессия теста',
                'verbose_name_plural': 'Сессии тестов',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_answer', models.JSONField(help_text='Для single: "0", для multiple: ["0","1"], для text: "went"', verbose_name='Ответ пользователя')),
                ('is_correct', models.BooleanField(verbose_name='Правильно')),
                ('ai_feedback', models.TextField(blank=True, help_text='Детальный анализ ответа от AI', verbose_name='AI анализ')),
                ('answered_at', models.DateTimeField(auto_now_add=True, verbose_name='Время ответа')),
                ('time_taken', models.IntegerField(default=0, help_text='Сколько секунд думал пользователь', verbose_name='Время на ответ (сек)')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_test.question', verbose_name='Вопрос')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='user_test.testsession', verbose_name='Сессия')),
            ],
            options={
                'verbose_name': 'Ответ',
                'verbose_name_plural': 'Ответы',
                'ordering': ['answered_at'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='user_test.topic', verbose_name='Тема'),
        ),
        migrations.CreateModel(
            name='TopicScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questions_asked', models.IntegerField(default=0, verbose_name='Задано вопросов')),
                ('correct_answers', models.IntegerField(default=0, verbose_name='Правильных ответов')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_scores', to='user_test.testsession', verbose_name='Сессия')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_test.topic', verbose_name='Тема')),
            ],
            options={
                'verbose_name': 'Оценка по теме',
                'verbose_name_plural': 'Оценки по темам',
            },
        ),
        migrations.AddIndex(
            model_name='testsession',
            index=models.Index(fields=['user', 'status'], name='user_test_t_user_id_c406fb_idx'),
        ),
        migrations.AddIndex(
            model_name='testsession',
            index=models.Index(fields=['-started_at'], name='user_test_t_started_c6a6fd_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['session', 'answered_at'], name='user_test_a_session_ebd540_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['level', 'topic', 'is_active'], name='user_test_q_level_ac50f4_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['is_active', 'difficulty_score'], name='user_test_q_is_acti_260178_idx'),
        ),
        migrations.AddIndex(
            model_name='topicscore',
            index=models.Index(fields=['session', 'topic'], name='user_test_t_session_f37b60_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topicscore',
            unique_together={('session', 'topic')},
        ),
    ]
